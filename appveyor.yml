version: 1.0.0-alpha+{build}

image:
  - Visual Studio 2017
  - Ubuntu

configuration: Release

platform: x64

environment:
  APPVEYOR_SAVE_CACHE_ON_ERROR: true

  VCPKG_PATH: "c:\\tools\\vcpkg"
  NINJA_URL_WIN: "https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-win.zip"
  MSVC_HOME: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community"

  DOCKER_LOGIN: infactum
  DOCKER_PASSWORD:
    secure: U+zwWzwRmm8gbcbCrVK5/A==
  DOCKER_IMAGE: infactum/telegram-native-builder

  matrix:
    - TARGET_PLATFORM: x86
    - TARGET_PLATFORM: x64

matrix:
  exclude:
    - image: Ubuntu
      TARGET_PLATFORM: x86

init:
  - ps: |
      If ($isLinux) {
        $env:APPVEYOR_CACHE_SKIP_RESTORE = "true"
        $env:APPVEYOR_CACHE_SKIP_SAVE = "true"
      }
  - cmd: |      
      appveyor DownloadFile %NINJA_URL_WIN% -FileName ninja.zip
      7z x ninja.zip -oC:\ninja > nul
      rm ninja.zip
      set PATH=C:\ninja;%PATH%
      ninja --version
  - cmd: |      
      echo. >> "%VCPKG_PATH%\triplets\%TARGET_PLATFORM%-windows-static.cmake"
      echo set(VCPKG_BUILD_TYPE release) >> "%VCPKG_PATH%\triplets\%TARGET_PLATFORM%-windows-static.cmake"
  - sh: |
      docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      docker pull $DOCKER_IMAGE

install: 
  - cmd: |      
      vcpkg list      
      .\install_prereq.bat "%VCPKG_PATH%" %TARGET_PLATFORM%
  - sh: docker build . --cache-from $DOCKER_IMAGE -t $DOCKER_IMAGE:latest

cache:
    - '%VCPKG_PATH%\installed\ -> install_prereq.bat, ports'

build_script: 
  - cmd: |
      call "%MSVC_HOME%\VC\Auxiliary\Build\vcvarsall.bat" %TARGET_PLATFORM%
      mkdir build
      cd build
      cmake "-DCMAKE_TOOLCHAIN_FILE=%VCPKG_PATH%\scripts\buildsystems\vcpkg.cmake" "-DVCPKG_TARGET_TRIPLET=%TARGET_PLATFORM%-windows-static" "-DCMAKE_BUILD_TYPE=%CONFIGURATION%" -GNinja ..
      ninja
  - sh: >- 
      docker run --rm -v $(pwd):/src $DOCKER_IMAGE /bin/bash -c "
        mkdir build && cd build;
        cmake -DCMAKE_BUILD_TYPE=Release /src;
        cmake --build .;
        ldd telegram_native.so;
        cp telegram_native.so /src;"

after_build:
  - sh: docker push $DOCKER_IMAGE
  - ps: |
      $prefix = "telegram_native"
      $suffix = If ($isLinux) {".so"} Else {".dll"}
      $artifact = "$($prefix)_$($env:TARGET_PLATFORM)$($suffix)"
      Rename-Item -Path "$prefix$suffix" -NewName "$artifact"
      Write-Host "Pushing artifact $artifact"
      Push-AppveyorArtifact $artifact
